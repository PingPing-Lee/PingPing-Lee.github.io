(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{425:function(t,e,a){"use strict";a.r(e);var r=a(14),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("上篇文章我们说到RN的调试依赖Chrome 开发工具，那我们就来详细了解一下～"),e("br"),t._v("\n谷歌 Chrome 开发工具，是基于谷歌浏览器内含的一套网页制作和调试工具。开发者工具允许网页开发者深入浏览器和网页应用程序的内部。"),e("br"),t._v("\n该工具可以有效地追踪布局问题，设置 JavaScript 断点并可深入理解代码的最优化策略。"),e("br"),t._v("\nChrome 开发工具一共提供了8大组工具：")]),t._v(" "),e("ul",[e("li",[t._v("Element 面板： 用于查看和编辑当前页面中的 HTML 和 CSS 元素。")]),t._v(" "),e("li",[t._v("Network 面板：用于查看 HTTP 请求的详细信息，如请求头、响应头及返回内容等。")]),t._v(" "),e("li",[t._v("Source 面板：用于查看和调试当前页面所加载的脚本的源文件。")]),t._v(" "),e("li",[t._v("TimeLine 面板： 用于查看脚本的执行时间、页面元素渲染时间等信息。")]),t._v(" "),e("li",[t._v("Profiles 面板：用于查看 CPU 执行时间与内存占用等信息。")]),t._v(" "),e("li",[t._v("Resource 面板：用于查看当前页面所请求的资源文件，如 HTML，CSS 样式文件等。")]),t._v(" "),e("li",[t._v("Audits 面板：用于优化前端页面，加速网页加载速度等。")]),t._v(" "),e("li",[t._v("Console 面板：用于显示脚本中所输出的调试信息，或运行测试脚本等。")])]),t._v(" "),e("blockquote",[e("p",[t._v("提示：对于调试React Native应用来说，Sources和Console是使用频率很高的两个工具。")])]),t._v(" "),e("p",[t._v("我们可以像调试JavaScript代码一样来调试React Native程序，那要如何操作呢？"),e("br"),t._v("\n可以通过以下步骤来调试你的React Native程序：")]),t._v(" "),e("h2",{attrs:{id:"启动远程调试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动远程调试"}},[t._v("#")]),t._v(" 启动远程调试")]),t._v(" "),e("p",[t._v('在Developer Menu下单击"Debug with Chrome" 启动JS远程调试功能。此时Chrome会被打开，同时会创建一个“http://localhost:8081/debugger-ui.” Tab页。')]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/rn/localhost-8081-debugger-ui.png",alt:"debugger-ui"}})]),t._v(" "),e("h2",{attrs:{id:"打开开发者工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打开开发者工具"}},[t._v("#")]),t._v(" 打开开发者工具")]),t._v(" "),e("p",[t._v("在该“http://localhost:8081/debugger-ui.”Tab页下打开开发者工具。"),e("br"),t._v("\n打开Chrome菜单->选择更多工具->选择开发者工具。你也可以通过快捷键(Command⌘ + Option⌥ + I on Mac, Ctrl + Shift + I on Windows)打开开发者工具。\n"),e("img",{attrs:{src:"/img/rn/dakfzgj.png",alt:"dakfzgj"}})]),t._v(" "),e("p",[t._v("打开Chrome开发着工具之后你会看到如下界面：\n"),e("img",{attrs:{src:"/img/rn/kfzgj.png",alt:"kfzgj"}})]),t._v(" "),e("h2",{attrs:{id:"巧用sources面板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#巧用sources面板"}},[t._v("#")]),t._v(" 巧用Sources面板")]),t._v(" "),e("p",[t._v("Sources 面板提供了调试 JavaScript 代码的功能。它提供了图形化的V8 调试器。\n"),e("img",{attrs:{src:"/img/rn/Sources.jpeg",alt:"Sources"}})]),t._v(" "),e("p",[t._v("Sources 面板可以让你看到你所要检查的页面的所有脚本代码，并在面板选择栏下方提供了一组标准控件，提供了暂停，恢复，步进等功能。在窗口的最下方的按钮可以在遇到异常(exception)时强制暂停。源码显示在单独的标签页，通过点击 打开文件导航面板，导航栏中会显示所有已打开的脚本文件。")]),t._v(" "),e("blockquote",[e("p",[t._v("日常开发中遇到了js报错或者其他代码问题，在检查一遍代码而一无所获之后，就可以打开Sources进行js断点调试")])]),t._v(" "),e("h3",{attrs:{id:"执行控工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行控工具"}},[t._v("#")]),t._v(" 执行控工具")]),t._v(" "),e("p",[t._v("从上图可以看到“执行控工具”按钮在侧板顶部，让你可以按步执行代码，当你进行调试的时候这几个按钮非常有用：")]),t._v(" "),e("ul",[e("li",[t._v("继续(Continue): 继续执行代码直到遇到下一个断点。")]),t._v(" "),e("li",[t._v("单步执行(Step over): 步进代码以查看每一行代码对变量作出的操作，当代码调用另一个函数时不会进入这个函数，使你可以专注于当前的函数。")]),t._v(" "),e("li",[t._v("跳入(Step into): 与 Step over 类似，但是当代码调用函数时，调试器会进去这个函数并跳转到函数的第一行。")]),t._v(" "),e("li",[t._v("跳出(Step out): 当你进入一个函数后，你可以点击 Step out 执行函数余下的代码并跳出该函数。")]),t._v(" "),e("li",[t._v("断点切换(Toggle breakpoints): 控制断点的开启和关闭，同时保持断点完好。")])]),t._v(" "),e("h3",{attrs:{id:"查看js文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看js文件"}},[t._v("#")]),t._v(" 查看js文件")]),t._v(" "),e("p",[t._v("如果你想在开发者工具上预览你的js文件，可以在打开Sources tab下的debuggerWorker.js选项卡，该选项卡下会显示当前调试项目的所有js文件。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/rn/ckjswj.png",alt:"ckjswj"}})]),t._v(" "),e("h3",{attrs:{id:"断点其实很简单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断点其实很简单"}},[t._v("#")]),t._v(" 断点其实很简单")]),t._v(" "),e("p",[t._v("断点(Breakpoint) 是在脚本中设置好的暂停处。在DevTools中使用断点可以调试JavaScript代码，DOM更新和 network calls。")]),t._v(" "),e("blockquote",[e("p",[t._v("可以像使用Xcode/AndroidStudio调试Native应用一样，来使用Chrome开发者工具通过断点对程序进行调试。")])]),t._v(" "),e("h3",{attrs:{id:"添加和移除断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加和移除断点"}},[t._v("#")]),t._v(" 添加和移除断点")]),t._v(" "),e("p",[t._v("在 Sources 面板的文件导航面板中打开一个JavaScript文件来调试，点击边栏(line gutter) 为当前行设置一个断点，已经设置的断点处会有一个蓝色的标签，单击蓝色标签，断点即被移除。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/rn/tjycdd.png",alt:"tjycdd"}})]),t._v(" "),e("blockquote",[e("p",[t._v("右键点击蓝色标签会打开一个菜单，菜单包含以下选项：执行到此(Continue to Here)，黑盒脚本(Blackbox scripts)，移除断点(Remove Breakpoint)， 编辑断点(Edit Breakpoint)，和 禁用断点(Disable Breakpoint)。在这里你可以对断点进行更高级的定制化的操作。\n"),e("img",{attrs:{src:"/img/rn/yjlstb.png",alt:"yjlstb"}})])]),t._v(" "),e("h3",{attrs:{id:"高级操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级操作"}},[t._v("#")]),t._v(" 高级操作")]),t._v(" "),e("p",[t._v("上文讲到右键点击蓝色标签会打开一个菜单，下面就介绍一下该菜单下的高级操作。")]),t._v(" "),e("h4",{attrs:{id:"执行到此-continue-to-here"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行到此-continue-to-here"}},[t._v("#")]),t._v(" 执行到此(Continue to Here)")]),t._v(" "),e("p",[t._v("如果你想让程序立即跳到某一行时，这个功能会帮到你。如果在该行之前还有别的断点，程序会依次经过前面的断点。另外需要提出的是这个功能在任意一行代码的边栏(gutter line)前单击右键都会看到。")]),t._v(" "),e("h4",{attrs:{id:"黑盒脚本-blackbox-scripts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#黑盒脚本-blackbox-scripts"}},[t._v("#")]),t._v(" 黑盒脚本(Blackbox scripts)")]),t._v(" "),e("p",[t._v("黑盒脚本会从你的调用堆栈中隐藏第三方代码。")]),t._v(" "),e("h4",{attrs:{id:"编辑断点-edit-breakpoint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编辑断点-edit-breakpoint"}},[t._v("#")]),t._v(" 编辑断点(Edit Breakpoint)")]),t._v(" "),e("p",[t._v("通过该功能你可以创建一个条件断点，你也可以在边栏(gutter line) 右键并选择添加条件断点(Add Conditional Breakpoint) 。在输入框中，输入一个可解析为真或假的表达式。仅当条件为真时，执行会在此暂停。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/rn/tianjiayichuduandian.png",alt:"tianjiayichuduandian"}})]),t._v(" "),e("blockquote",[e("p",[t._v("如果你想让程序在某处从来都不要暂停，可以编辑一个条件永远为false的条件断点。另外，你也可以在该行代码的边栏(gutter line)前单击右键选择“Never pause here”即可，你会发现“Never pause here”其实就是在该行代码上设了一个永远为false的条件断点。\n"),e("img",{attrs:{src:"/img/rn/Neverpausehere.png",alt:"Neverpausehere"}})])]),t._v(" "),e("h4",{attrs:{id:"管理你的断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管理你的断点"}},[t._v("#")]),t._v(" 管理你的断点")]),t._v(" "),e("p",[t._v("可以通过Chrome开发者工具的右边面板来统一管理你的断点。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/rn/guanliduandian.png",alt:"guanliduandian"}})]),t._v(" "),e("blockquote",[e("p",[t._v("可以通过断点前的复选框来启用和禁用断点，也可以单击右键来进行更多的操作(如：移除断点，移除所有断点，启用禁用断点等)")])]),t._v(" "),e("h4",{attrs:{id:"有一种断点叫全局断点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有一种断点叫全局断点"}},[t._v("#")]),t._v(" 有一种断点叫全局断点")]),t._v(" "),e("p",[t._v("全局断点的作用是，当程序出现异常时，会在异常的地方暂停，这对快速定位异的常位置很方便。\n做iOS开发的同学都知道在Xcode中可以设置全局断点，其实在Chrome 开发者工具中也同样有与之对应的功能，叫“Pause On Caught Exceptions”。如果勾选上此功能，则即使所发生运行时异常的代码在 try/catch 范围内，Chrome 开发者工具也能够在错误代码处停住。")]),t._v(" "),e("h4",{attrs:{id:"不要忽略控制台"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不要忽略控制台"}},[t._v("#")]),t._v(" 不要忽略控制台")]),t._v(" "),e("p",[t._v("DevTools 控制台(Console) 可以让你在目前已暂停的状态下进行试验。按 Esc 键打开/关闭控制台。")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/rn/Console.png",alt:"Console"}})]),t._v(" "),e("blockquote",[e("p",[t._v("可以在控制台(Console)上打印变量，执行脚本等操作。在开发调试中非常有用。")])])])}),[],!1,null,null,null);e.default=s.exports}}]);