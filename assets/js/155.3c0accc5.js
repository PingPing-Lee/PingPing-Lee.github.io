(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{429:function(a,t,s){"use strict";s.r(t);var n=s(14),e=Object(n.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"创建项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[a._v("#")]),a._v(" 创建项目")]),a._v(" "),t("p",[a._v("初始化一个React Native应用，我们可以通过React Native命令行工具来完成，打开终端输入并运行下面命令：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("//创建一个GitHub_RN项目\nnpx react-native init GitHub_RN \n//创建指定版本的RN项目\nnpx react-native init GitHub_RN "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--version")]),a._v(" X.XX.X  \n//创建支持typescript的RN项目\nnpx react-native init GitHub_RN "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--template")]),a._v(" react-native-template-typescript \n")])])]),t("p",[a._v("运行此命令之后，React Native会从npm上下载一些项目所依赖的包，并完成项目的初始化：")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("GitHub_RN\n│   index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("js 项目入口文件\n│  \n└───android Android Native项目；\n│   \n└───ios  iOS Native项目；\n│   \n└───App"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("js"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v("App"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("tsx 初始化时生成的模板页面\n│\n└───"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("package")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("json 项目配置文件\n")])])]),t("h2",{attrs:{id:"运行项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行项目"}},[a._v("#")]),a._v(" 运行项目")]),a._v(" "),t("p",[a._v("React Native应用创建完成之后呢，我们便可以运行它了，运行一个React Native应用通常有两种方式：")]),a._v(" "),t("p",[a._v("第一种方式：通过React Native命令行工具")]),a._v(" "),t("p",[a._v("打开终端进入React Native项目的根目录然后输入并运行下面命令即可：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" GitHub_RN\nnpx react-native run-ios\n//或者打开GitHub_RN/ios/GitHub_RN.xcworkspace 通过Xcode的运行按钮来和运行\n//或者通过下面命令来运行\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" run ios\n")])])]),t("h2",{attrs:{id:"faq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#faq"}},[a._v("#")]),a._v(" FAQ")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("修改npm镜像，提高项目初始化的速度")]),a._v(" "),t("p",[a._v("我们在初始化React Native应用或从npm上安装一些组件的时候通常的情况下是比较慢的，这是因为npm的服务是设在国外的，所以在国内访问的速度不是很理想。提高项目初始化的速度我们可以为npm设置一个国内镜像，让npm每次下载组件的时候都从国内的镜像上获取这样一来速度就会大大提高")]),a._v(" "),t("ul",[t("li",[a._v("iOS修改npm镜像的方法：")])]),a._v(" "),t("p",[a._v("在iOS电脑上我们可以在.npmrc文件中设置npm的下载镜像地址，.npmrc文件通常在/Users/用户名/.npmrc路径下，打开此文件然后添加：")]),a._v(" "),t("p",[t("code",[a._v("registry = https://registry.npm.taobao.org")])]),a._v(" "),t("p",[a._v("如果没有修改权限，那么可以将此文件复制一份到别的地方，修改完成之后再替换过去即可。"),t("br"),a._v("\n这样一来访问npm的时候就会被重定向到我们所设置的https://registry.npm.taobao.org镜像服务器，所以说速度就会大大提高。")])]),a._v(" "),t("li",[t("p",[a._v("error Error: Failed to install CocoaPods dependencies for iOS project")]),a._v(" "),t("ul",[t("li",[a._v("在创建RN项目的时候报：")])]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("✔ Downloading template\n✔ Copying template\n✔ Processing template\n✖ Installing CocoaPods dependencies "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("this may take a few minutes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n✖ Installing CocoaPods dependencies "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("this may take a few minutes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nerror Error: Failed to "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" CocoaPods dependencies "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),a._v(" iOS project, "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("which")]),a._v(" is required by this template.\nPlease try again manually: "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"cd ./GitHub_RN/ios && pod install"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n")])])]),t("p",[a._v("此时的解决方案是按照上述提示执行cd ./GitHub_RN/ios && pod install 来手动按照pod 依赖。")])]),a._v(" "),t("li",[t("p",[a._v("fatal: unable to access xxx: LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 60\n在执行 pod install 时报下面错误：")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("Cloning into "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'/var/folders/17/7bfwgsq91h11swypprszs5400000gn/T/d20211007-6599-6qe3vk'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\nfatal: unable to access "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'https://github.com/facebook/flipper.git/'")]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("60")]),a._v("\n")])])]),t("p",[a._v("此问题主要是网络原因导致的，解决方案有两种：\n+ 再次执行pod install，多试几次\n+ 如果问题依旧那么可以设置代理之后在执行安装")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);