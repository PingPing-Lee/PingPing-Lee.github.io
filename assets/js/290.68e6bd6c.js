(window.webpackJsonp=window.webpackJsonp||[]).push([[290],{562:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"dce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dce"}},[s._v("#")]),s._v(" DCE")]),s._v(" "),t("p",[s._v("了解 "),t("strong",[s._v("tree shaking")]),s._v(" 之前先来了解一个名词 DCE(Dead code elimination)，解释起来就是把没有用到的代码 Dead code 擦除掉")]),s._v(" "),t("p",[s._v("这里提到的没有用到的代码可以具体指以下情况：")]),s._v(" "),t("ul",[t("li",[s._v("代码不会被执⾏，不可到达")]),s._v(" "),t("li",[s._v("代码执⾏的结果不会被⽤到")]),s._v(" "),t("li",[s._v("代码只会影响死变量（只写不读）")])]),s._v(" "),t("h2",{attrs:{id:"tree-shaking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[s._v("#")]),s._v(" tree shaking")]),s._v(" "),t("p",[s._v("在 1 个模块中可能有多个⽅法，只要其中的某个⽅法使⽤到了，则整个⽂件都会被打到 bundle ⾥⾯去，"),t("strong",[s._v("tree shaking")]),s._v(" 也是沿用 DCE 的规则来分析哪些代码未被引用并标记，然后在 uglify 阶段把没⽤到的代码擦除掉，只把⽤到的⽅法打⼊ bundlejs 中")]),s._v(" "),t("p",[t("strong",[s._v("tree shaking")]),s._v(" 必须是 ES6 的语法，因为其主要利⽤ ES6 模块的特点:")]),s._v(" "),t("ul",[t("li",[s._v("只能作为模块顶层的语句出现")]),s._v(" "),t("li",[s._v("import 的模块名只能是字符串常量")]),s._v(" "),t("li",[s._v("import binding 是 immutable的\n代码擦除： uglify 阶段删除⽆⽤代码")])]),s._v(" "),t("p",[s._v("在 webpack4 中默认⽀持，在打包时设置的 mode 为 production 的情况下默认开启，下面就来具体看看实现方式如下：")]),s._v(" "),t("ol",[t("li",[s._v("在我们的项目中添加一个新的通用模块文件 src/tree-shaking.js，并导出两个函数：")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'This is func a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'This is func b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("新建完成之后，更新入口 src/index.js 脚本，并将 src/tree-shaking.js 引入，但是并不使用其方法，具体代码如下：")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// src/index.js")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'./tree-shaking'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Search")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("React"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Component")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("render")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("div className"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"search-text"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("div"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n")])])]),t("ul",[t("li",[s._v("这是其实 src/tree-shaking.js 中的 function a 和 function b 都是未被使用，就是所谓的“未引用代码(dead code)”")])]),s._v(" "),t("p",[s._v("如果这时执行命令打包之后查看 bundle 文件发现，function a 和 function b 还是被打包进去了，如下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/img/webpack/tree-shaking.png",alt:"tree-shaking"}})]),s._v(" "),t("p",[s._v("说明我们这个时候并没有真正的开启 "),t("strong",[s._v("tree shaking")]),s._v("，想要解决这个问题还需要将 webpack.config.js 中 mode 选项设置为 production，从而启用 minification(代码压缩) 和 "),t("strong",[s._v("tree shaking")]),s._v("，代码如下：")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// webpack.config.js")]),s._v("\nmodule"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("   mode"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'production'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("此时重新构建再次查看 bundle 文件，就不会存在 function a 和 function b，说明已经正确开启 "),t("strong",[s._v("tree shaking")]),s._v(" 了")]),s._v(" "),t("h2",{attrs:{id:"sideeffects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sideeffects"}},[s._v("#")]),s._v(" sideEffects")]),s._v(" "),t("p",[s._v("正常情况构建时会对所有模块进行 "),t("strong",[s._v("tree shaking")]),s._v("，如果想要排除某些文件，需要在 package.json 中配置 "),t("code",[s._v("sideEffects")]),s._v(" 属性，具体代码如下：")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"name"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your-project"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"sideEffects"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*.css"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 表示除 .css 文件以外的进行 tree shaking  ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);