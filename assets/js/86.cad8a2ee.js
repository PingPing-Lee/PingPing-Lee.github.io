(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{360:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在 Node 项目实战中，我们需要对 HTTP API 做处理，处理方式有多种，这里主要介绍两种 "),s("strong",[t._v("RESTful")]),t._v(" 和 "),s("strong",[t._v("GraphQL")])]),t._v(" "),s("p",[s("strong",[t._v("RESTful")]),t._v(" 和 "),s("strong",[t._v("GraphQL")]),t._v(" 都是基于 HTTP 进行数据的请求与接收，是一种前后端通信规范，用于数据查询的网站架构方案")]),t._v(" "),s("h2",{attrs:{id:"restful"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restful"}},[t._v("#")]),t._v(" RESTful")]),t._v(" "),s("p",[s("strong",[t._v("RESTful")]),t._v(" 大致是通过 HTTP 包中的 method(get、post、delete、put等) 做路由的处理，核心思想就是每一个资源就是一个路径，通过对路径的不同请求的 method 来决定请求的操作， 以一个 GET 请求为例，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/node/RESTful.png",alt:"RESTful"}})]),t._v(" "),s("p",[t._v("整个请求处理的过程可以分为以下几步：")]),t._v(" "),s("ul",[s("li",[t._v("服务器接收到请求并提取出请求的方法（比如上面的 GET 方法）和 URL 路径")]),t._v(" "),s("li",[t._v("服务端框架层找到相关的 API 的代码和方法")]),t._v(" "),s("li",[t._v("通过执行代码来获取请求的数据结果")]),t._v(" "),s("li",[t._v("服务端框架将请求结果进行封装之后，返回给客户端")])]),t._v(" "),s("p",[t._v("总结下来 "),s("strong",[t._v("RESTful")]),t._v(" 需要预先在服务端定义好 API 返回的数据模型，请求的时候才能获取服务端返回的数据，但是这种方式不同的 method 代表不同的行为操作，简单易懂")]),t._v(" "),s("p",[t._v("但是 "),s("strong",[t._v("RESTful")]),t._v(" 在数据的聚合方面有很大劣势，所以 Facebook 提出了新的规范 "),s("strong",[t._v("GraphQL")])]),t._v(" "),s("h2",{attrs:{id:"graphql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#graphql"}},[t._v("#")]),t._v(" GraphQL")]),t._v(" "),s("p",[s("strong",[t._v("GraphQL")]),t._v(" 是 Facebook 于 2012 年在内部开发的数据查询语言，在 2015 年开源，旨在提供 RESTful 架构体系的替代方案，"),s("a",{attrs:{href:"https://graphql.org/graphql-js/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网建议戳这里"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("GraphQL")]),t._v(" 专注数据聚合，可以让客户端在请求中指定查询的数据，而不像 RESTful那样在服务端进行预定义")]),t._v(" "),s("p",[t._v("在 "),s("strong",[t._v("GraphQL")]),t._v(" 里面，请求和数据模型的定义实际上是分离的，你可以在服务端定义多个数据模型 schema，请求的时候也可以针对服务端不同的数据模型进行查询")]),t._v(" "),s("p",[t._v("基础示例代码：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" graphql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buildSchema "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"graphql"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 buildSchema 构建一个数据模型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" schema "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("buildSchema")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n  type Query {\n    hello: String\n  }\n")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rootValue为每个API端点提供一个解析器函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rootValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("hello")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world!"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 运行 query '{ hello }'，并打印出响应")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("graphql")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("source")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{ hello }"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  rootValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("response")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("整个请求处理的过程可以分为以下几步：")]),t._v(" "),s("ul",[s("li",[t._v("服务器接收 HTTP 请求，提取对应的 GraphQL 的查询信息")]),t._v(" "),s("li",[t._v("服务端通过解析查询语句，调用针对查询语句里面每一个字段的解析器（Resolver）")]),t._v(" "),s("li",[t._v("解析器函数被执行之后得到查询的数据结果")]),t._v(" "),s("li",[t._v("GraphQL 框架把请求结果进行封装之后，返回给客户端")])])])}),[],!1,null,null,null);s.default=r.exports}}]);